// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConversationType {
  Direct
  Group
}

enum ChatType {
  Message
  Voice
  Image
}

model User {
  id            Int                    @id @default(autoincrement())
  name          String
  username      String                 @unique
  phone         String                 @unique
  avatar        String?
  bio           String?
  rfToken       String?
  lastOnline    DateTime?
  blockerUsers  BlockUsers[]           @relation(name: "BlockerUser")
  blockedUsers  BlockUsers[]           @relation(name: "BlockedUser")
  contacts      Contacts[]             @relation(name: "MainUser")
  userContact   Contacts[]             @relation(name: "UserContact")
  conversations ConversationsOnUsers[]
  Chat          Chat[]                 @relation(name: "ChatSender")
  ChatSeen      ChatSeen[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  deletedChat   Chat[]                 @relation("chatRemover")
}

model Conversation {
  id          Int                    @id @default(autoincrement())
  name        String
  image       String?
  description String?
  type        ConversationType
  members     ConversationsOnUsers[]
  lastChat    DateTime
  chats       Chat[]                 @relation(name: "ConversationChat")
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model ConversationsOnUsers {
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@id([conversationId, userId])
}

model Chat {
  id             Int          @id @default(autoincrement())
  conversationId Int
  conversation   Conversation @relation(name: "ConversationChat", fields: [conversationId], references: [id])
  content        String
  senderId       Int
  sender         User         @relation("ChatSender", fields: [senderId], references: [id])
  seen           Boolean
  isEdited       Boolean
  isDeleted      Boolean
  filePath       String?
  type           ChatType
  seenBy         ChatSeen[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  deletedById    Int?
  deletedBy      User?        @relation(name: "chatRemover", fields: [deletedById], references: [id])
}

model ChatSeen {
  chatId   Int
  chat     Chat @relation(fields: [chatId], references: [id])
  seenById Int
  seen     User @relation(fields: [seenById], references: [id])

  @@id([seenById, chatId])
}

model BlockUsers {
  blockerId   Int
  blockerUser User @relation(name: "BlockerUser", fields: [blockerId], references: [id])
  blockedId   Int
  blockedUser User @relation(name: "BlockedUser", fields: [blockedId], references: [id])

  @@id([blockerId, blockedId])
}

model Contacts {
  userId    Int
  user      User @relation(name: "MainUser", fields: [userId], references: [id])
  contactId Int
  contact   User @relation(name: "UserContact", fields: [contactId], references: [id])

  @@id([contactId, userId])
}
